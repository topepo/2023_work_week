{
  "hash": "02be93195834b8e32a4759d151f63cc4",
  "result": {
    "markdown": "---\ntitle: \"Shine a little more light inside black-box models\"\nauthor: \"Max Kuhn\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n---\n\n\n\n\n\n\n## Understanding models\n\nWhen we are optimizing models, we often want to compare model complexity and performance. \n\nWe want: a simple model that perform well\n\n## An example\n\nThe lasso is a statistical tool that does feature selection during the model fit. \n\nThe \"penalty\" is a tuning parameter and controls how many predictors are retained. \n\nWe can _optimize_ our model over the penalty value!\n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.centered {\n  text-align: center !important\n}\n</style>\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n![](a_little.png){fig-align=\"center\" width=40%}\n\n::: {.centered}\nMany predictors\n\nModel error unknown\n:::\n\n:::\n\n::: {.column width=\"10%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"40%\"}\n![](a_lot.png){fig-align=\"center\" width=40%}\n\n::: {.centered}\nFew predictors\n\nModel error unknown\n:::\n\n:::\n\n::::\n\n\n\n## What does this tell plot us? \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/penalty-autoplot-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## ¯\\\\_(ツ)_/¯\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/penalty-huh-1-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## (´･_･`)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/penalty-huh-2-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## characterizations\n\n\nThe `characterize` package gives you information about the important aspects of your model. \n\n\nFor example: translates the penalty to the number of predictors.\n\n<br>\n\n```r\nlibrary(tidymodels)\nlibrary(characterize)\n\nctrl <- control_grid(extract = retain_characteristics)\n\n## insert tune code here\n\ncollect_characteristics(tune_res)  # or\n\ncollect_characteristics(tune_res, add_metrics = TRUE) # OR\n\ncollect_characteristics(tune_res, add_metrics = TRUE, wide = TRUE)\n```\n\n## ᕕ( ᐛ )ᕗ\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/penalty-yeah-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## ℰ⋆‿⋆ℰ\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/enhance-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## A decision tree example\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/cart-1.png){fig-align='center' width=20%}\n:::\n:::\n\n\n\n## Thanks!\n\nCheck it out: \n\n```r\npak::pak(\"topepo/characterize\")\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}