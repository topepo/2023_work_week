{
  "hash": "3f7d0d44dc3c84066f76fcebcb309e91",
  "result": {
    "markdown": "---\ntitle: \"Shine a little more light inside black-box models\"\nauthor: \"Max Kuhn\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n---\n\n\n\n\n\n\n## Understanding models\n\nWhen we are optimizing models, we often want to compare model complexity and performance. \n\n* We want: a simple model that perform well\n\nThe lasso is a statistical tool that does feature selection during the model fit. \n\nThe tuning parameter, ~~lambda~~ penalty controls how many predictors are removed. \n\n\n\n## Do we care about the penalty value? \n\nWe can fit our model with a collection of penalty values and see how the model's performance changes. \n\nThat's nice and everything but the point was to see how the number of predictors changes with performance. \n\nNot the same thing. \n\nThe `glmnet` package is... _difficult_ and the conversion of penalty to number of predictors cumbersome.\n\n## What does this tell plot us? \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](2023_work_week_files/figure-revealjs/penalty-autoplot-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## ¯\\\\_(ツ)_/¯\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](2023_work_week_files/figure-revealjs/penalty-huh-1-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## (´･_･`)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](2023_work_week_files/figure-revealjs/penalty-huh-2-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## characterizations\n\n\nThe `characterize` package gives you information about the important aspects of your model. \n\n\nFor each value of penalty, how many predictors were in the model? \n\n<br>\n\n```r\nlibrary(tidymodels)\nlibrary(characterize)\n\nctrl <- control_grid(extract = retain_characteristics)\n\n## insert tune code here\n\ncollect_characteristics(tune_res)  # or\n\ncollect_characteristics(tune_res, add_metrics = TRUE) # OR\n\ncollect_characteristics(tune_res, add_metrics = TRUE, wide = TRUE)\n```\n\n## t(ツ)_/¯\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](2023_work_week_files/figure-revealjs/penalty-yeah-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## ℰ⋆‿⋆ℰ\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](2023_work_week_files/figure-revealjs/enhance-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## A decision tree example\n\n\n\n::: {.cell layout-align=\"center\" hash='2023_work_week_cache/revealjs/cart_a1df51028218d7e57d097fab3f2e4288'}\n::: {.cell-output-display}\n![](2023_work_week_files/figure-revealjs/cart-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## Thanks!\n\nCheck it out: \n\n```r\npak::pak(\"topepo/characterize\")\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}